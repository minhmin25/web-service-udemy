Docker
Docker Registry hub.docker.com
Là nơi lưu trữ các repository, các version khác nhau của application
Image là bao gồm tất cả những gì 1 application cần để running
Image là static, khi start image lên thì được gọi là container
1 Image cho thể chạy nhiều container

Kiến trức của Docker

Docker Client  > Docker Deamon (Docker Engine)
Docker Client là nơi mà viết các lệnh command, khi execute các lệnh command được gửi tới Docker Deamon
Docker Deamon là nơi quản lý các image, container, pull/push local image to image registry, tạo mới image

Command:
Docker image history <image id>
Show các bước để tạo ra image
Docker image inspect <image id>
Docker container inspect <container id>
Show các thông số của 1 image/container

docker container run -p 5001:5000 -d <image>
docker run -p 5001:5000 -d <image>
Start container tại port 5001 ở máy local mapping vào port 5000 trong docker container, -d detached mode( chạy ngầm )
Image chưa có trong local registry sẽ được tìm trên image registry, download về rồi mới chạy

docker run -m 512m --cpu-quota 50000
run container mới limit 512mb ram, cpu 50%, 100% = 100000

docker logs -f <container id>
show log của container đang chạy

docker container pause <container id>
docker container unpause <container id>
Tạm dừng container

docker container stop <container id>
Dừng chạy container, cho container thời gian để tự stop
docker container kill <container id>
Stop container ngay lập tức
docker container prune
Xoá các container đã stop

docker events
Monitor các hành động start/stop container
docker top <container id>
show các process đang chạy
docker stats
show các thông số cpu, ram, bộ nhớ của các container đang chạy
docker df
show các thông số mà docker deamon đang sử dụng


Kubernetes
- Kubernetes là 1 công cụ điều phối hệ thống phân tán
- 1 trong những công cụ để quản lý tài nguyên ( resource manager ) tốt và phổ biến nhất hiện giờ
- Resource ở đây là các server, các server này đặt trên cloud, thông thường là các virtual server
- Các nhà cung cấp dịch vụ cloud có các tên gọi khác nhau về virtual server, Amazone gọi là EC2 (Elastic Compute Cloud) Azure gọi là virtual machines, Google Cloud gọi là compute engines
- Kubernetes gọi khái niệm virtual server là nodes
- Kubernetes có thể quản lý hàng nghìn nodes như thế này
- Để quản lý số lượng nodes lớn như thế, sẽ có 1 vài nodes gọi là master nodes, thông thường sẽ là 1 master node, khi cần 1 hệ thống lớn, có tính sẵn sàng cao thì khi đó sẽ có nhiều master nodes
- Cluster trong Kubernetes là sự kết hợp của các nodes và master nodes. 
Cluster = Master Nodes + Worker Nodes
Trong đó master nodes sẽ quản lý các worker nodes, worker node sẽ là nơi thực hiện chạy application
Các component bên trong cluster đều giao tiếp với nhau qua API Server, Master Node và Workder Node giao tiếp với nhau bằng kubelet trên Worker Node thông qua API Server trên Master Node
Tất cả những component trong một kubernetes cluster sẽ không phải chạy như một ứng dụng cài trực tiếp trên server. Mà tất cả những component sẽ được chạy như một Pod, chúng sẽ được deploy tới master hoặc worker node và chạy như một Pod bình thường và nằm trong namespace tên là kube-system
kubectl get po -n kube-system

- Master node gồm các thành phần: API Server(kube-apiserver), distribute database(etcd), Scheduler(kube-scheduler), Controller Manager(kube-controller-manager)

+ Distribute database(etcd) có nhiệm vụ lưu lại tất cả resource (pod, replicas, deployment, service) bao gồm cả các thay đổi config trong kubernetes như tạo deployment, scaling operation, 5 instance cho application A, 10 instance cho application B,... các thông tin này trong kubernetes được gọi là desired state
Tất cả các component khác bên trong cluster sẽ đọc ghi dữ liệu vào etcd thông qua API Server và chỉ duy nhất API Server tương tác trực tiếp với etcd
# đọc dữ liệu etcd
etcd /registry
Database này là phân tán, nên có từ 3-5 replicas cho database này để đảm bảo các thông tin không bị mất
Dữ liệu bên trong này được lưu dưới dạng key-value

+ API Server(kube-apiserver) thực hiện giao tiếp giữa các thành phần bên trong cluster và cả với client
API server cung cấp cho một REST API để thực hiện các hành động CRUD lên cluster state, đọc, ghi, thay đổi cluster state và lưu cluster state vào etcd
API server sẽ chịu trách nhiệm Authentication, Authorization client, validation config của resource, chuyển đổi resource thành dạng có thể lưu vào trong etcd. Một API server client hay dùng nhất là kubectl

API Server không thực hiện công việc tạo ra Pod, hoặc tạo ra ReplicaSet, tất cả những gì nó làm là lưu resource vào etcd, sau đó nó sẽ gửi thông báo tới component phụ trách việc tạo ra resource đó - Controller Manager

VD: 
Các command từ kubectl hoặc từ các thay đổi trên giao diện console (Google Cloud Console...) sẽ được gọi qua apiserver trước khi được chuyển đến các controler để xử lý chúng
Khi tạo 1 resource, 1 POST request sẽ được gửi đến API Server với body là config của resource. Sau đó API server sẽ kiểm tra xem client này có được phép gọi tới nó hay không qua Authentication plugin, sau đó API sẽ kiểm tra quyền của client này có được thực hiện hành động này hay không qua Authorization plugin. Tiếp theo API server sẽ thực hiện chuyển đổi config resource ban đầu thành dạng format nó có thể đọc thông quá các Admission control plugin. Bước tiếp theo API server sẽ validation config của resource này có đúng hay không, nếu mọi thứ đều ok hết thì resource này sẽ được lưu vào ectd

+ Scheduler(kube-scheduler) Đây là component phụ trách việc sẽ chọn worker nào mà Pod sẽ được deploy tới. Công việc nó làm sẽ là lắng nghe thông báo từ API server về việc Pod nào đã được lưu vào ectd xong, mà chưa có thuộc tính node. Nó sẽ lựa chọn worker node phù hợp dựa trên các thông số resource khả dụng, constraint..., sau đó đó update thuộc tính node của Pod resource thông qua API server. Sau đó, API server sẽ thông báo tới kubelet ở worker node đó để tạo ra container runtime tương ứng với Pod đó.

+ Controller Manager(kube-controller-manager)
Đây là component phụ trách việc tạo, deploy các resource thông qua API server. Component này sẽ chứa nhiều controller khác nhau, mỗi controller sẽ thực hiện công việc riêng của nó. Một số controller như: Replication controllers, Deployment controller,...
Controller Manager còn quản lý tổng thể các thông số (overall health) của cluster, nó được gọi là 1 control loop, một vòng lắp vô hạn để điều tiết trạng thái của hệ thống, controller này sẽ theo dõi các shared state của cluster thông qua api server, nó sẽ điều phối để thực hiện gửi các yêu cầu đến các controller khác

- Worker node(Node) gồm các thành phần: Node Agent(kubelet), Networking Component(kube-proxy), Container Runtime(CRI - docker, rkt,...), PODS

+ PODS: thành phần chứa các running containers

+ Node Agent(kubelet) sẽ thực hiện moniter bên trong node, quản lý các container runtime các và nó sẽ chịu trách nhiệm tương tác với master node
Khi join một worker node vào master, thì công việc đầu tiên của kubelet này sẽ là tạo một POST request với body là node config tới API server để tạo một node resource. Sau đó nó sẽ lắng nghe thông báo từ API server về Pod mà được scheduled tới nó (do Scheduler thực hiện trên master node) để tạo container runtime tương ứng. Ngoài ra kubelet còn giám sát container và gửi thông tin đó lên API server. Khi Pod bị xóa khỏi API server, API server sẽ thông báo tới kubelet và nó sẽ thực hiện việc xóa container đó ra khỏi node, sau khi xong thì nó sẽ gửi thông báo lại cho API server là container tương ứng với Pod đó đã được xóa xong

+ Networking Component(kube-proxy)
Đây là component quản lý traffic và network của worker node mà liên quan tới Pod. Khi tạo Service để client có thể tương tác được với Pod, thì ở bên dưới kube-proxy này sẽ dựa vào config của service để cấu hình network tương ứng ở worker node để một request có thể gửi được tới Pod mà nằm phía sau Service. Thằng kube-proxy này sẽ có 3 mode: userspace, iptable, ipvs
userspace mode là cách đầu tiên mà kube-proxy được implement, request từ client sẽ iptable của OS sau đó gửi đến kube-proxy (proxy-server) rồi mới được gửi mới pod
iptable mode được phát triển để cải thiện performent, khi này request sẽ được gửi thẳng từ iptable tới pod, kube-proxy chỉ thực hiện nhiệm vụ setting để request tới được pod từ iptable không phải đi qua 1 proxy-server nữa.
ipvs(IP vitrual service) là được phát triển để cải thiện tiếp hiệu năng của iptable

+ Container Runtime
component dùng để chạy các container, Container Runtime được sử dụng phổ biến ở đây là docker, ngoài ra trên Kubernetes có thể sử dụng với bất cứ OCI (Open Container Interface) nào khác để chạy container

Ví dụ luồng xử lý cơ bản:
Khi tạo một Deployment dùng kubectl
Đầu tiên, kubectl sẽ extract config file và gán vào body của post request, sau đó sẽ gửi post request này tới API server, API server sau khi thực hiện hết các việc của nó và lưu được deployment resouce vào bên trong etcd, lúc này API server sẽ gửi thông báo tới Deployment controller. Deployment controller nhận được thông báo rằng deployment mới đã được tạo, thì nó sẽ tìm config về template ReplicaSet bên trong config của nó để gửi request tạo ra ReplicaSet tới API server. Sau khi API server lưu ReplicaSet resouce vào trong etcd thì nó sẽ gửi thông báo cho ReplicaSet controller, ReplicaSet controller sẽ nhận thông báo và gửi request tạo Pod tới API server. API server lưu Pod resouce và thông báo cho Schedulcer, Scheduler chọn node và báo lại cho API server. API server sẽ thông báo tới kubelet ở worker node tương ứng để tạo container runtime cho Pod

Command
Tạo deployment
kubectl create deployment hello-world-rest-api --image=minhta/hello-world-rest-api:0.0.1.RELEASE

Expose ra ngoài internet
kubectl expose deployment hello-world-rest-api --type=LoadBalancer --port=8080

Khi thực hiện command kubectl create deployment, Kubernetes thực hiện tạo ra 1 deployment, 1 replicaset, 1 pod
Khi thực hiện command kubectl expose deployment, Kubernetes thực hiện tạo 1 service

- Mỗi một khái niệm deployment, replicaset, pod, service sẽ đảm nhiệm 1 nhiệm vụ riêng
- Pod: Pod là đơn vị deployable nhỏ nhất trong Kubernetes, pod là 1 tập hợp các containers
kubectl get pods
kubectl describe pod <pod id>

Node > Multi pods > Multi containers

Mỗi pod có 1 unique ip address, trong 1 pod có thể chứa nhiều container, các container này sẽ chia sẻ tài nguyên bên trong pod, có thể tương tác với nhau bằng cách gọi nhau qua localhost
Các pod khác nhau trong cùng 1 node có thể là các application khác nhau hoặc cũng có thể liên quán đến cùng 1 application

Pod có namespace
namespace có thể được dùng để phân biệt các nhóm khác nhau bên trong 1 cluster
ví dụ: trong cùng 1 cluster sẽ được phân chia resource cho dev, test, khi đó namespace sẽ được dùng để phân biệt các thành phần cùng chung resource với nhau

Có thể nói là 1 pod cung cấp cách để đặt các container cùng với nhau, hoạt động trên cùng 1 ip address và cung cấp cho chúng 1 cơ chế phân loại bằng cách liên kết chúng qua labels (Thuộc tính cần chú ý của các thành phần trong Kubernetes để có thể liên kết với nhau là labels và selectors)

- Replicaset: Replicaset có chức năng đảm bảo 1 số lượng pods cụ thể luôn được chạy cùng lúc với nhau, hay có thể gọi là nhiều instance của 1 pod chạy cùng lúc với nhau
kubectl get replicaset / kubectl get rs
kubectl scale deployment <deployment name> --replicas=3

Replicaset sẽ monitoring pods, nếu có số lượng pods ít hơn số lượng được cấu hình, replicaset sẽ tạo thêm pods

- Deployment: Deployment có nhiệm vụ đảm bảo việc update phiên bản khác của application không có downtime
# Thay image vào deployment đang hoạt động
kubectl set image deployment <deployment name> <container name>=<image name>
kubectl set image deployment hello-world-rest-api hello-world-rest-api=in28min/hello-world-rest-api:0.0.2.RELEASE
# xem các thông tin của replicaset, bao gồm cả thông tin containers, pods,...
kubectl get rs hoặc kubectl get rs -o wide

Cấu trúc của deployment: 1 deployment sẽ có nhiều replicaset
Deployment > Multi Replicaset > Multi Pods

cơ chế mặc định của deployment được gọi là rolling updates, cơ chế này sẽ thực hiện tạo mới 1 replicaset, replicaset mới sẽ tạo pod đầu tiên, khi pod này hoạt động mà không có lỗi, deployment bắt đầu thực hiện giảm từng pods của replicaset cũ, và tăng từng pod trên replicaset mới, việc này được thực hiện tuần tự, giảm 1, thêm 1, kiểm tra hoạt động của pod mới, đến khi replicaset mơi đạt đủ số pods mà replicaset cũ đang chạy, và replicaset cũ không còn pod nào hoạt động.
Khi mà replicaset mới tạo pod đầu tiên bị lỗi thì deployment sẽ dừng ngay việc tạo thêm pod mới và duy trì hoạt động của replicaset hiện tại

Một số cơ chế khác của deployment:

Để check xem kubernetes thực hiện những gì bên dưới có thể check bằng
kubectl get events --sort-by metadata creationTimestamps

- Service: Service có vai trò cung cấp 1 interface ra bên ngoài (always available external interface) để truy cập đến ứng dụng mà đang chạy bên trong pod
Pod có thể xem là đơn vị có nhiều biến động trong kubernetes, có thể bị xoá bất cứ lúc nào và cũng có thể tạo mới bất cứ lúc nào, ví dụ khi deployment version mới, toàn bộ pod cũ bị xoá và thay bằng các pod, ip của các pod này là hoàn toàn khác nhau, ip của pod mới sẽ không trùng với pod vừa bị xoá
Service sẽ có nhiệm vụ cho phép truy cập ứng dụng đang chạy bên trong pod qua ip cố định duy nhất mà không cần quan tâm đến ip của từng pod là gì
Service được tạo ngay khi có commend expose deployment


